apiVersion: apps/v1
kind: Deployment
metadata:
  name: deepfence-router
  namespace: {{ .Release.Namespace }}
  labels:
    app: deepfence-console
    name: deepfence-router
    {{- include "deepfence-console.labels" . | nindent 4 }}
spec:
  {{- if not .Values.router.autoscaling.enabled }}
  replicas: {{ .Values.router.replicaCount }}
  {{- end }}  
  selector:
    matchLabels:
      name: deepfence-router
      {{- include "deepfence-console.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: deepfence-console
        name: deepfence-router
        {{- include "deepfence-console.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecretName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      containers:
        - name: deepfence-router
          image: "{{ .Values.registry.imagePrefix }}{{ .Values.router.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.router.image.pullPolicy }}
          env:
          - name: ENABLE_AUTH
            value: "true"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          volumeMounts:
          {{- if .Values.tls.pemfile }}
            - name: deepfence-cert-volume
              mountPath: /usr/local/etc/haproxy/deepfence.pem
              subPath: deepfence.pem
          {{- end }}
          {{- if and .Values.tls.certFile .Values.tls.keyFile }}
            - name: deepfence-ui-ssl-cert-file
              mountPath: /etc/deepfence/certs/deepfence.crt
              subPath: deepfence.crt
              readOnly: true
            - name: deepfence-ui-ssl-key-file
              mountPath: /etc/deepfence/certs/deepfence.key
              subPath: deepfence.key
              readOnly: true
          {{- end }}
          resources:
            requests:
              memory: 100Mi
              cpu: {{ .Values.defaultResourceLimits.requests.cpu }}
{{- if eq "true" .Values.setDefaultResourceLimits }}
            limits:
              cpu: {{ .Values.defaultResourceLimits.limits.cpu }}
              memory: {{ .Values.defaultResourceLimits.limits.memory }}
{{- end }}
      {{- with .Values.router.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: name
                    operator: In
                    values:
                      - deepfence-router
              topologyKey: kubernetes.io/hostname
{{- if .Values.topologyNodeAffinityHostName }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: NotIn
                    values:
                      - "{{ .Values.topologyNodeAffinityHostName }}"
{{- end }}
      {{- with .Values.router.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      volumes:
      {{- if .Values.tls.pemfile }}
        - name: deepfence-cert-volume
          configMap:
            name: deepfence-cert
      {{- end }}
      {{- if and .Values.tls.certFile .Values.tls.keyFile }}
        - name: deepfence-ui-ssl-cert-file
          configMap:
            name: deepfence-ui-ssl-cert
        - name: deepfence-ui-ssl-key-file
          configMap:
            name: deepfence-ui-ssl-cert
      {{- end }}